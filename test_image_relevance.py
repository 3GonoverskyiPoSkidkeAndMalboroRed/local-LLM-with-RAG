"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

from server.yandex_rag_service import YandexRAGService
from server.utils.image_extractor import ImageExtractor

async def test_image_relevance():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–µ—Ä–≤–∏—Å–∞
    rag_service = YandexRAGService()
    image_extractor = ImageExtractor()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    test_file = "test_document_with_images.txt"
    
    if os.path.exists(test_file):
        print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞: {test_file}")
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        with open(test_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = image_extractor.extract_images_from_file(test_file, content)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
        
        for i, image in enumerate(images):
            relevance = image.get('relevance_score', 0.0)
            context = image.get('context', '–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
            print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}:")
            print(f"    –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.2f} ({relevance*100:.1f}%)")
            print(f"    –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context[:100]}...")
            print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–¥–µ–ª (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    department_id = 1
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–∏—Å—Ç–µ–º—É
        print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        init_result = await rag_service.initialize_rag(department_id, force_reload=True)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {init_result}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        test_questions = [
            "–ö–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
            "–ü–æ–∫–∞–∂–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏",
            "–ï—Å—Ç—å –ª–∏ —Å—Ö–µ–º—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
            "–ö–∞–∫–∏–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è?"
        ]
        
        for question in test_questions:
            print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            print("-" * 50)
            
            try:
                result = await rag_service.query_rag(department_id, question)
                
                print(f"üìù –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
                print(f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {result.get('sources_count', 0)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
                sources = result.get('sources', [])
                total_images = 0
                
                for i, source in enumerate(sources):
                    images = source.get('images', [])
                    if images:
                        total_images += len(images)
                        print(f"  üì∑ –ò—Å—Ç–æ—á–Ω–∏–∫ {i+1}: {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                        
                        for j, img in enumerate(images):
                            relevance = img.get('relevance_score', 0.0)
                            context = img.get('context', '–ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
                            print(f"    –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {j+1}: —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å {relevance:.2f}")
                
                print(f"üìà –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ: {total_images}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_image_relevance())
