# ВЕРСИЯ 0.0.1
version: '3.8'

services:
  db:
    image: mysql:8.0
    ports:
    # подключение к `docker` в workbench
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-123123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-db}
    volumes:  
      - db_data:/var/lib/mysql
      - ./backup4.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-123123}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:8000:8000"
    environment:
      - DATABASE_URL=mysql+mysqlconnector://root:${MYSQL_ROOT_PASSWORD:-123123}@db:3306/${MYSQL_DATABASE:-db}
      - DEBUG=${DEBUG:-False}
      - OLLAMA_HOST=http://ollama:11434
      - API_URL=http://backend:8000
      - EXTERNAL_URL=http://nginx:80
    depends_on:
      db:
        condition: service_healthy
    command: ["python", "-m", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "3", "--limit-concurrency", "10", "--backlog", "100"]
    networks:
      - app-network
    volumes:
      - files_storage:/app/files
      - ./server:/app

  frontend:
    build:
      context: ./vite-soft-ui-dashboard-main
      dockerfile: Dockerfile
    ports:
      - "8083:80"
    depends_on:
      - backend
    volumes:
      - ./vite-soft-ui-dashboard-main/nginx.conf:/etc/nginx/conf.d/default.conf
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://nginx:80/api}
    networks:
      - app-network

  # backup:
  #   image: mysql:8.0
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-123123}
  #   volumes:
  #     - db_data:/var/lib/mysql
  #     - ./backup:/backup
  #   depends_on:
  #     - db
  #   command: ["sh", "-c", "mysqldump -h db -u root -p${MYSQL_ROOT_PASSWORD:-123123} ${MYSQL_DATABASE:-db} > /backup/backup_file.sql"]
  #   networks:
  #     - app-network

  nginx:
    image: nginx:latest
    ports:
      - "8081:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    environment:
      # КОНСЕРВАТИВНЫЕ настройки для стабильности
      - OLLAMA_NUM_PARALLEL=1  # Только 1 параллельный запрос
      - OLLAMA_MAX_LOADED_MODELS=1  # Только 1 модель в памяти
      - OLLAMA_FLASH_ATTENTION=false  # Отключаем для стабильности
      - OLLAMA_KV_CACHE_TYPE=q4_0  # Экономия VRAM
      - OLLAMA_MAX_QUEUE=5  # Уменьшаем очередь
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_SCHEDULE_TIMEOUT=120s  # Увеличиваем таймаут
      - OLLAMA_KEEP_ALIVE=5m  # Держим модель в памяти 5 минут
      - OLLAMA_GPU_LAYERS=35  # Ограничиваем GPU слои
    deploy:
      resources:
        limits:
          memory: 8G  # Ограничиваем память
        reservations:
          memory: 4G
          devices:
            - driver: nvidia
              count: 1  # Только 1 GPU
              capabilities: [gpu]
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3



volumes:
  db_data:
  files_storage:
  ollama_data:

networks:
  app-network:
    driver: bridge


