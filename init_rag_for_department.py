#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.append('server')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DATABASE_URL', 'mysql+mysqlconnector://root:123123@localhost:3306/db_test')

from yandex_rag_service import YandexRAGService
from database import SessionLocal
from models_db import Department, Content, RAGSession, DocumentChunk

async def init_rag_for_department(department_id: int, force_reload: bool = True):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç RAG –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    
    print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –¥–ª—è –æ—Ç–¥–µ–ª–∞ {department_id}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä RAG —Å–µ—Ä–≤–∏—Å–∞
    rag_service = YandexRAGService()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞
        department = db.query(Department).filter(Department.id == department_id).first()
        if not department:
            print(f"‚ùå –û—Ç–¥–µ–ª —Å ID {department_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üìÅ –û—Ç–¥–µ–ª: {department.department_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        contents = db.query(Content).filter(Content.department_id == department_id).all()
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª–µ: {len(contents)}")
        
        if not contents:
            print("‚ùå –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for content in contents:
            print(f"   - {content.title} (ID: {content.id})")
            print(f"     –ü—É—Ç—å: {content.file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å RAG
        rag_session = db.query(RAGSession).filter(RAGSession.department_id == department_id).first()
        if rag_session:
            print(f"üìä –¢–µ–∫—É—â–∏–π RAG —Å—Ç–∞—Ç—É—Å:")
            print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ –î–∞' if rag_session.is_initialized else '‚ùå –ù–µ—Ç'}")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG: {rag_session.documents_count}")
            print(f"   –ß–∞–Ω–∫–æ–≤ –≤ RAG: {rag_session.chunks_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞–Ω–∫–∏
        existing_chunks = db.query(DocumentChunk).filter(DocumentChunk.department_id == department_id).count()
        print(f"üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞–Ω–∫–æ–≤: {existing_chunks}")
        
        if force_reload and existing_chunks > 0:
            print("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞–Ω–∫–∏ (force_reload=True)")
            db.query(DocumentChunk).filter(DocumentChunk.department_id == department_id).delete()
            db.commit()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG
        print("‚öôÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG...")
        result = await rag_service.initialize_rag(department_id=department_id, force_reload=force_reload)
        
        print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"   –£—Å–ø–µ—Ö: {'‚úÖ –î–∞' if result.get('success') else '‚ùå –ù–µ—Ç'}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {result.get('documents_processed', 0)}")
        print(f"   –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {result.get('chunks_created', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.get('success'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —á–∞–Ω–∫–∏
            new_chunks = db.query(DocumentChunk).filter(DocumentChunk.department_id == department_id).count()
            print(f"üîç –ù–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {new_chunks}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å RAG
            updated_session = db.query(RAGSession).filter(RAGSession.department_id == department_id).first()
            if updated_session:
                print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π RAG —Å—Ç–∞—Ç—É—Å:")
                print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ –î–∞' if updated_session.is_initialized else '‚ùå –ù–µ—Ç'}")
                print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG: {updated_session.documents_count}")
                print(f"   –ß–∞–Ω–∫–æ–≤ –≤ RAG: {updated_session.chunks_count}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {updated_session.last_updated}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.get('message')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    finally:
        db.close()

async def test_rag_query(department_id: int):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–¥–µ–ª–∞ {department_id}")
    
    rag_service = YandexRAGService()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = await rag_service.get_rag_status(department_id)
        print(f"üìä RAG —Å—Ç–∞—Ç—É—Å: {status}")
        
        if status.get('is_initialized', False):
            # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
            result = await rag_service.query_rag(
                department_id=department_id,
                question="–ß—Ç–æ —Ç–∞–∫–æ–µ RAG —Å–∏—Å—Ç–µ–º–∞?"
            )
            print(f"üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:")
            print(f"   –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result.get('sources', []))}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {result.get('context_used', 0)}")
        else:
            print("‚ùå RAG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –¥–ª—è –æ—Ç–¥–µ–ª–æ–≤")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    departments_to_init = [1, 5]  # –û—Ç–¥–µ–ª—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    
    for dept_id in departments_to_init:
        print(f"\n{'='*50}")
        success = await init_rag_for_department(dept_id, force_reload=True)
        
        if success:
            await test_rag_query(dept_id)
        
        print(f"{'='*50}\n")

if __name__ == "__main__":
    asyncio.run(main())
