#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ RAG
"""

import requests
import json
import time
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
DEPARTMENT_ID = "5"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª 5 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def test_rag_with_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
    
    print(f"üìù –í–æ–ø—Ä–æ—Å: {question}")
    print(f"üè¢ –û—Ç–¥–µ–ª: {DEPARTMENT_ID}")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        response = requests.post(
            f"{API_BASE_URL}/llm/query",
            json={
                "question": question,
                "department_id": DEPARTMENT_ID
            },
            timeout=30
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {response.status_code}")
            print(response.text)
            return False
            
        task_data = response.json()
        task_id = task_data["task_id"]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
        
        # 2. –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        print("\n2Ô∏è‚É£ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
        max_attempts = 30
        attempts = 0
        
        while attempts < max_attempts:
            attempts += 1
            
            response = requests.get(
                f"{API_BASE_URL}/llm/query/{task_id}",
                timeout=10
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                continue
                
            result = response.json()
            status = result["status"]
            
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{max_attempts}: {status}")
            
            if status == "completed":
                print("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                break
            elif status == "failed":
                print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
            elif status == "processing":
                print("   ‚è≥ –ó–∞–¥–∞—á–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
            else:
                print(f"   ‚è≥ –°—Ç–∞—Ç—É—Å: {status}")
            
            time.sleep(2)
        else:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
            return False
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        
        answer = result.get("answer", "")
        sources = result.get("sources", [])
        chunks = result.get("chunks", [])
        files = result.get("files", [])
        
        print(f"üìÑ –û—Ç–≤–µ—Ç ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"   {answer[:200]}...")
        
        print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
        print(f"   - –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
        print(f"   - –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(chunks)}")
        print(f"   - –§–∞–π–ª–æ–≤: {len(files)}")
        
        if sources:
            print("\nüìã –î–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
            for i, source in enumerate(sources[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                print(f"   {i+1}. {source.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}")
                print(f"      –ü—É—Ç—å: {source.get('file_path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"      ID: {source.get('chunk_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                if source.get('page_number'):
                    print(f"      –°—Ç—Ä–∞–Ω–∏—Ü–∞: {source['page_number']}")
                if source.get('similarity_score'):
                    print(f"      –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {source['similarity_score']:.3f}")
                print(f"      –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {source.get('chunk_content', '')[:100]}...")
                print()
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if sources:
            print("4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
            first_source = sources[0]
            chunk_id = first_source.get('chunk_id')
            
            if chunk_id:
                response = requests.get(
                    f"{API_BASE_URL}/llm/source/{task_id}/{chunk_id}",
                    timeout=10
                )
                
                if response.status_code == 200:
                    source_details = response.json()
                    print(f"‚úÖ –î–µ—Ç–∞–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {chunk_id}")
                    print(f"   –§–∞–π–ª: {source_details.get('file_name')}")
                    print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {len(source_details.get('chunk_content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {response.status_code}")
        
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
    print(f"üåê API URL: {API_BASE_URL}")
    print()
    
    success = test_rag_with_sources()
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)

if __name__ == "__main__":
    main() 