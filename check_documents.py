#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª–∞—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.append('server')

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ.setdefault('DATABASE_URL', 'mysql+mysqlconnector://root:123123@localhost:3306/db_test')

from database import SessionLocal
from models_db import Department, Content, RAGSession, DocumentChunk

def check_documents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ—Ç–¥–µ–ª–∞—Ö"""
    
    db = SessionLocal()
    
    try:
        print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª–∞—Ö ===\n")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª—ã
        departments = db.query(Department).all()
        
        for dept in departments:
            print(f"üìÅ –û—Ç–¥–µ–ª: {dept.department_name} (ID: {dept.id})")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª–∞
            contents = db.query(Content).filter(Content.department_id == dept.id).all()
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(contents)}")
            
            if contents:
                for content in contents:
                    print(f"   - {content.title} (ID: {content.id})")
                    print(f"     –ü—É—Ç—å: {content.file_path}")
                    print(f"     –î–æ—Å—Ç—É–ø: {content.access_level}")
                    print(f"     –¢–µ–≥: {content.tag_id}")
                    print()
            else:
                print("   –ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                print()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å—Ç–∞—Ç—É—Å
            rag_session = db.query(RAGSession).filter(RAGSession.department_id == dept.id).first()
            if rag_session:
                print(f"   RAG —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞' if rag_session.is_initialized else '‚ùå –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}")
                print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG: {rag_session.documents_count}")
                print(f"   –ß–∞–Ω–∫–æ–≤ –≤ RAG: {rag_session.chunks_count}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {rag_session.last_updated}")
            else:
                print("   RAG —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            print("-" * 50)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

def check_rag_chunks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á–∞–Ω–∫–∏ RAG"""
    
    db = SessionLocal()
    
    try:
        print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞–Ω–∫–æ–≤ RAG ===\n")
        
        chunks = db.query(DocumentChunk).all()
        print(f"–í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        if chunks:
            for chunk in chunks:
                print(f"–ß–∞–Ω–∫ {chunk.id}:")
                print(f"  –î–æ–∫—É–º–µ–Ω—Ç: {chunk.content_id}")
                print(f"  –û—Ç–¥–µ–ª: {chunk.department_id}")
                print(f"  –ò–Ω–¥–µ–∫—Å: {chunk.chunk_index}")
                print(f"  –¢–µ–∫—Å—Ç: {chunk.chunk_text[:100]}...")
                print(f"  –≠–º–±–µ–¥–¥–∏–Ω–≥: {'–ï—Å—Ç—å' if chunk.embedding_vector else '–ù–µ—Ç'}")
                print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {'–ï—Å—Ç—å' if chunk.images else '–ù–µ—Ç'}")
                print()
        else:
            print("–ß–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    check_documents()
    check_rag_chunks()
