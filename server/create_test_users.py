#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
"""

import os
import sys
from sqlalchemy.orm import Session
from database import get_db
from models_db import User, Department, Access
from passlib.context import CryptContext

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_test_users():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    db = next(get_db())
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        users_data = [
            {
                "login": "admin",
                "password": "admin123",
                "role_id": 1,  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 1,  # –ü—É–±–ª–∏—á–Ω—ã–π
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
            },
            {
                "login": "head_it",
                "password": "head123",
                "role_id": 3,  # –ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–ì–ª–∞–≤–∞ IT –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "head_hr",
                "password": "head123",
                "role_id": 3,  # –ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–ì–ª–∞–≤–∞ HR –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "resp_it",
                "password": "resp123",
                "role_id": 4,  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π IT –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "resp_hr",
                "password": "resp123",
                "role_id": 4,  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π HR –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "user1",
                "password": "user123",
                "role_id": 2,  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 1,  # –ü—É–±–ª–∏—á–Ω—ã–π
                "full_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å IT –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "user2",
                "password": "user123",
                "role_id": 2,  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 1,  # –ü—É–±–ª–∏—á–Ω—ã–π
                "full_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å HR –æ—Ç–¥–µ–ª–∞"
            }
        ]
        
        for user_data in users_data:
            existing = db.query(User).filter(User.login == user_data["login"]).first()
            if not existing:
                # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                hashed_password = pwd_context.hash(user_data["password"])
                
                user = User(
                    login=user_data["login"],
                    password=hashed_password,
                    role_id=user_data["role_id"],
                    department_id=user_data["department_id"],
                    access_id=user_data["access_id"],
                    full_name=user_data["full_name"]
                )
                
                db.add(user)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']} (—Ä–æ–ª—å: {user_data['role_id']})")
            else:
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_data['login']}")
        
        db.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        users = db.query(User).all()
        for user in users:
            role_names = {1: "–ê–¥–º–∏–Ω", 2: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 3: "–ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞", 4: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞"}
            role_name = role_names.get(user.role_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"   - {user.login} ({role_name}) - {user.full_name}")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        raise

if __name__ == "__main__":
    create_test_users()
