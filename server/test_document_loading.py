#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_document_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        from document_loader import load_documents
        
        path = "files/ContentForDepartment/5"
        
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑: {path}")
        
        documents = load_documents(path)
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
        for i, doc in enumerate(documents):
            print(f"\nüìù –î–æ–∫—É–º–µ–Ω—Ç {i+1}:")
            print(f"  –ò—Å—Ç–æ—á–Ω–∏–∫: {doc.metadata.get('source', 'unknown')}")
            print(f"  –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(doc.page_content)}")
            print(f"  –ù–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞: {doc.page_content[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not doc.page_content.strip():
                print("  ‚ö†Ô∏è –¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π!")
            else:
                print("  ‚úÖ –¢–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π")
        
        return len(documents) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_text_loader_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TextLoader"""
    print("\nüîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TextLoader...")
    
    try:
        from langchain_community.document_loaders import TextLoader
        
        file_path = "files/ContentForDepartment/5/test_document.txt"
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {content[:100]}...")
            print(f"üìè –î–ª–∏–Ω–∞ —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextLoader
        loader = TextLoader(file_path, encoding='utf-8')
        documents = loader.load()
        
        print(f"üìÑ TextLoader –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
        for i, doc in enumerate(documents):
            print(f"  –î–æ–∫—É–º–µ–Ω—Ç {i+1}:")
            print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫: {doc.metadata.get('source', 'unknown')}")
            print(f"    –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(doc.page_content)}")
            print(f"    –ù–∞—á–∞–ª–æ: {doc.page_content[:50]}...")
        
        return len(documents) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ TextLoader: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", test_document_loading),
        ("TextLoader", test_text_loader_direct),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(results) - success_count}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {len(results) - success_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 