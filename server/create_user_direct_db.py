#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel2 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
from dotenv import load_dotenv
from passlib.context import CryptContext
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models_db import User

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_user_direct():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel2 –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_URL = "mysql+mysqlconnector://root:123123@localhost:3307/db_main"
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        engine = create_engine(DATABASE_URL)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db = SessionLocal()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
        existing_user = db.query(User).filter(User.login == "Pavel2").first()
        if existing_user:
            print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Pavel2 —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            print(f"üìã ID: {existing_user.id}")
            print(f"üìã –õ–æ–≥–∏–Ω: {existing_user.login}")
            print(f"üìã –†–æ–ª—å: {existing_user.role_id}")
            print(f"üìã –û—Ç–¥–µ–ª: {existing_user.department_id}")
            print(f"üìã –î–æ—Å—Ç—É–ø: {existing_user.access_id}")
            print(f"üìã –§–ò–û: {existing_user.full_name}")
            return
        
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        hashed_password = pwd_context.hash("123123")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            login="Pavel2",
            password=hashed_password,
            role_id=1,
            department_id=5,
            access_id=3,
            full_name="YGF"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel2...")
        db.add(new_user)
        db.commit()
        db.refresh(new_user)
        
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Pavel2 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìã ID: {new_user.id}")
        print(f"üìã –õ–æ–≥–∏–Ω: {new_user.login}")
        print(f"üìã –†–æ–ª—å: {new_user.role_id}")
        print(f"üìã –û—Ç–¥–µ–ª: {new_user.department_id}")
        print(f"üìã –î–æ—Å—Ç—É–ø: {new_user.access_id}")
        print(f"üìã –§–ò–û: {new_user.full_name}")
        print(f"üìã –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {new_user.created_at}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
        if 'db' in locals():
            db.rollback()
    finally:
        if 'db' in locals():
            db.close()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Pavel2 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    create_user_direct()
