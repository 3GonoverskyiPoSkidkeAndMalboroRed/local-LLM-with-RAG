#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_embeddings():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        from yandex_embeddings import create_embeddings
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        embeddings = create_embeddings(model="text-search-doc")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã.",
            "RAG - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."
        ]
        
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
        
        for i, text in enumerate(test_texts):
            print(f"\nüìÑ –¢–µ–∫—Å—Ç {i+1}: {text[:50]}...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
                embedding = embeddings.embed_query(text)
                print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(embedding)}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_embeddings_batch():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ batch —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        from yandex_embeddings import create_embeddings
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        embeddings = create_embeddings(model="text-search-doc")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = [
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã RAG —Å–∏—Å—Ç–µ–º—ã.",
            "RAG - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.",
            "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —Å–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã."
        ]
        
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º batch –∏–∑ {len(test_texts)} —Ç–µ–∫—Å—Ç–æ–≤...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º batch —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            batch_embeddings = embeddings.embed_documents(test_texts)
            print(f"‚úÖ Batch —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ–∑–¥–∞–Ω—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(batch_embeddings)}")
            
            for i, embedding in enumerate(batch_embeddings):
                print(f"  –≠–º–±–µ–¥–¥–∏–Ω–≥ {i+1}: —Ä–∞–∑–º–µ—Ä {len(embedding)}")
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è batch —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è batch —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    tests = [
        ("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏", test_embeddings),
        ("Batch —ç–º–±–µ–¥–¥–∏–Ω–≥–∏", test_embeddings_batch),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(results) - success_count}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è {len(results) - success_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        return False

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 