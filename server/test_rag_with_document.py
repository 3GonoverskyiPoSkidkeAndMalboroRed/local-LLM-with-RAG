#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç RAG —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_rag_with_document():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å —Ä–µ–∞–ª—å–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º...")
    
    try:
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ RAG
        test_request = {
            "query": "–ß—Ç–æ —Ç–∞–∫–æ–µ RAG –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            "department_id": "5",
            "max_chunks": 5,
            "similarity_threshold": 0.5,  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
            "include_metadata": True,
            "use_cache": True
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {json.dumps(test_request, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = client.post("/api/yandex/rag/query", json=test_request)
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ RAG –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result.get('sources', []))}")
            print(f"üìù –ß–∞–Ω–∫–∏: {len(result.get('chunks_used', []))}")
            print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            if "–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" not in result.get('answer', ''):
                print("üéâ RAG –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö!")
                return True
            else:
                print("‚ö†Ô∏è RAG –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_simple_query():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    
    try:
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        test_request = {
            "query": "–ø—Ä–∏–≤–µ—Ç",
            "department_id": "5",
            "max_chunks": 3,
            "similarity_threshold": 0.3,
            "include_metadata": True,
            "use_cache": True
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: {test_request['query']}")
        
        response = client.post("/api/yandex/rag/query", json=test_request)
        
        if response.status_code == 200:
            result = response.json()
            print(f"üìÑ –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:200]}...")
            print(f"üìù –ß–∞–Ω–∫–∏ –Ω–∞–π–¥–µ–Ω–æ: {len(result.get('chunks_used', []))}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

async def test_rag_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        response = client.get("/api/yandex/rag/health")
        
        if response.status_code == 200:
            health = response.json()
            print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞!")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {health.get('status')}")
            print(f"üîß RAG —Å–µ—Ä–≤–∏—Å: {'‚úÖ' if health.get('rag_service_available') else '‚ùå'}")
            print(f"ü§ñ LLM –º–æ–¥–µ–ª—å: {'‚úÖ' if health.get('llm_model_available') else '‚ùå'}")
            print(f"üìà Embedding –º–æ–¥–µ–ª—å: {'‚úÖ' if health.get('embedding_model_available') else '‚ùå'}")
            print(f"üíæ –ö—ç—à: {'‚úÖ' if health.get('cache_available') else '‚ùå'}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("RAG —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º", test_rag_with_document),
        ("–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å", test_simple_query),
        ("–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã", test_rag_health),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(results) - success_count}")
    
    if success_count == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! RAG —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("‚úÖ –û—à–∏–±–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã:")
        print("   - object tuple can't be used in 'await' expression")
        print("   - 'Session' object has no attribute 'similarity_search_by_vector'")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å execute_with_retry")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - success_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 