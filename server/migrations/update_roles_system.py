#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –¥–æ—Å—Ç—É–ø–∞
–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ä–æ–ª–∏: –ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞, –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import os
import sys
from sqlalchemy import create_engine, text, inspect
from sqlalchemy.orm import sessionmaker
from database import Base
from models_db import User, Department, Access, Content, Tag

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.environ.get("DATABASE_URL", "mysql+mysqlconnector://root:123123@localhost:3306/db_main")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∏ —Å–µ—Å—Å–∏–∏
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def run_migration():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")
    
    with engine.connect() as connection:
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π
            print("üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–æ–ª–µ–π...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã role
            inspector = inspect(engine)
            if 'role' not in inspector.get_table_names():
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É role –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                connection.execute(text("""
                    CREATE TABLE `role` (
                        `id` int NOT NULL,
                        `role_name` varchar(45) NOT NULL,
                        PRIMARY KEY (`id`)
                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
                """))
                print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ role")
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            connection.execute(text("DELETE FROM `role`"))
            connection.execute(text("""
                INSERT INTO `role` VALUES 
                (1, '–ê–¥–º–∏–Ω'),
                (2, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                (3, '–ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞'),
                (4, '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞')
            """))
            print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
            
            # 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            
            connection.execute(text("""
                CREATE TABLE IF NOT EXISTS `content_proposals` (
                    `id` int NOT NULL AUTO_INCREMENT,
                    `title` varchar(255) NOT NULL,
                    `description` text,
                    `access_level` int NOT NULL,
                    `department_id` int NOT NULL,
                    `tag_id` int,
                    `proposed_by` int NOT NULL,
                    `status` enum('pending', 'approved', 'rejected') DEFAULT 'pending',
                    `reviewed_by` int,
                    `review_comment` text,
                    `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                    `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    PRIMARY KEY (`id`),
                    KEY `fk_proposal_department_idx` (`department_id`),
                    KEY `fk_proposal_access_idx` (`access_level`),
                    KEY `fk_proposal_tag_idx` (`tag_id`),
                    KEY `fk_proposal_user_idx` (`proposed_by`),
                    KEY `fk_proposal_reviewer_idx` (`reviewed_by`),
                    CONSTRAINT `fk_proposal_access` FOREIGN KEY (`access_level`) REFERENCES `access` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
                    CONSTRAINT `fk_proposal_department` FOREIGN KEY (`department_id`) REFERENCES `department` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
                    CONSTRAINT `fk_proposal_tag` FOREIGN KEY (`tag_id`) REFERENCES `tags` (`id`) ON DELETE SET NULL ON UPDATE CASCADE,
                    CONSTRAINT `fk_proposal_user` FOREIGN KEY (`proposed_by`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
                    CONSTRAINT `fk_proposal_reviewer` FOREIGN KEY (`reviewed_by`) REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
            """))
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ content_proposals")
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print("üë§ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ creator_id –≤ —Ç–∞–±–ª–∏—Ü—É content...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è creator_id
            columns = [col['name'] for col in inspector.get_columns('content')]
            if 'creator_id' not in columns:
                connection.execute(text("""
                    ALTER TABLE `content` 
                    ADD COLUMN `creator_id` int NULL,
                    ADD COLUMN `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
                    ADD COLUMN `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    ADD KEY `fk_content_creator_idx` (`creator_id`),
                    ADD CONSTRAINT `fk_content_creator` FOREIGN KEY (`creator_id`) REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
                """))
                print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ creator_id –≤ —Ç–∞–±–ª–∏—Ü—É content")
            
            # 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if 'status' not in columns:
                connection.execute(text("""
                    ALTER TABLE `content` 
                    ADD COLUMN `status` enum('active', 'inactive', 'archived') DEFAULT 'active'
                """))
                print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ status –≤ —Ç–∞–±–ª–∏—Ü—É content")
            
            connection.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            connection.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            raise

if __name__ == "__main__":
    run_migration()
