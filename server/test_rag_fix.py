#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π RAG
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_rag_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    try:
        from yandex_rag_service import YandexRAGService, RAGContext, get_rag_service
        print("‚úÖ yandex_rag_service –∏–º–ø–æ—Ä—Ç OK")
        
        from document_loader import vec_search
        print("‚úÖ document_loader.vec_search –∏–º–ø–æ—Ä—Ç OK")
        
        from routes.yandex_rag_routes import router
        print("‚úÖ yandex_rag_routes –∏–º–ø–æ—Ä—Ç OK")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

async def test_rag_service_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from yandex_rag_service import get_rag_service
        
        rag_service = await get_rag_service()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        assert hasattr(rag_service, '_error_handler'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _error_handler"
        assert hasattr(rag_service, '_cache'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _cache"
        assert hasattr(rag_service, 'llm_model'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç llm_model"
        assert hasattr(rag_service, 'embedding_model'), "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç embedding_model"
        
        print("‚úÖ –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã RAG —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

async def test_rag_context():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    try:
        from yandex_rag_service import RAGContext
        
        context = RAGContext(
            query="—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            department_id="5",
            max_chunks=3,
            similarity_threshold=0.7
        )
        
        print(f"‚úÖ RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω: query='{context.query}', department_id='{context.department_id}'")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        return False

async def test_vec_search_function():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ vec_search"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ vec_search...")
    
    try:
        from document_loader import vec_search
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
        import inspect
        sig = inspect.signature(vec_search)
        params = list(sig.parameters.keys())
        
        expected_params = ['embedding_model', 'query', 'db', 'n_top_cos', 'timeout']
        for param in expected_params:
            assert param in params, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä {param}"
        
        print("‚úÖ –°–∏–≥–Ω–∞—Ç—É—Ä–∞ vec_search –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è vec_search: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π RAG...")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã RAG", test_rag_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞", test_rag_service_creation),
        ("RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç", test_rag_context),
        ("–§—É–Ω–∫—Ü–∏—è vec_search", test_vec_search_function),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(results) - success_count}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! RAG –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - success_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 