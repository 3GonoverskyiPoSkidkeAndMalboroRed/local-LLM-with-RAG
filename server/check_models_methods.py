#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –≤ –º–æ–¥—É–ª–µ models Yandex Cloud ML SDK
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from yandex_cloud_ml_sdk import AsyncYCloudML
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –≤ –º–æ–¥—É–ª–µ models...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    client = AsyncYCloudML(folder_id="test", auth="test")
    
    print("üìã –ú–µ—Ç–æ–¥—ã –≤ client.models:")
    if hasattr(client, 'models'):
        models_methods = [method for method in dir(client.models) if not method.startswith('_')]
        for method in sorted(models_methods):
            print(f"   - {method}")
        
        print(f"\nüìä –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –≤ models: {len(models_methods)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ models:")
        print(f"   generate: {'‚úÖ' if hasattr(client.models, 'generate') else '‚ùå'}")
        print(f"   generate_text: {'‚úÖ' if hasattr(client.models, 'generate_text') else '‚ùå'}")
        print(f"   chat: {'‚úÖ' if hasattr(client.models, 'chat') else '‚ùå'}")
        print(f"   complete: {'‚úÖ' if hasattr(client.models, 'complete') else '‚ùå'}")
        print(f"   generate_content: {'‚úÖ' if hasattr(client.models, 'generate_content') else '‚ùå'}")
        
    else:
        print("‚ùå –ú–æ–¥—É–ª—å models –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}") 