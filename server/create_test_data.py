#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from sqlalchemy.orm import Session
from database import get_db
from models_db import User, Department, Access, Content, Tag
from passlib.context import CryptContext

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    db = next(get_db())
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–æ–≤...")
        department_names = ["IT –æ—Ç–¥–µ–ª", "HR –æ—Ç–¥–µ–ª", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–û–±—â–∏–π –æ—Ç–¥–µ–ª"]
        
        for dept_name in department_names:
            existing = db.query(Department).filter(Department.department_name == dept_name).first()
            if not existing:
                dept = Department(department_name=dept_name)
                db.add(dept)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª: {dept_name}")
            else:
                print(f"   ‚ö†Ô∏è –û—Ç–¥–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dept_name}")
        
        db.commit()
        
        # 2. –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        print("üîê –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞...")
        access_names = ["–ü—É–±–ª–∏—á–Ω—ã–π", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π", "–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π"]
        
        for access_name in access_names:
            existing = db.query(Access).filter(Access.access_name == access_name).first()
            if not existing:
                access = Access(access_name=access_name)
                db.add(access)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {access_name}")
            else:
                print(f"   ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {access_name}")
        
        db.commit()
        
        # 3. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users_data = [
            {
                "login": "admin",
                "password": "admin123",
                "role_id": 1,  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 1,  # –ü—É–±–ª–∏—á–Ω—ã–π
                "full_name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã"
            },
            {
                "login": "Pavel2",
                "password": "123123",
                "role_id": 2,  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                "department_id": 5,  # –û–±—â–∏–π –æ—Ç–¥–µ–ª
                "access_id": 3,  # –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π
                "full_name": "–ü–∞–≤–µ–ª –ü–µ—Ç—Ä–æ–≤"
            },
            {
                "login": "user1",
                "password": "user123",
                "role_id": 2,  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
            },
            {
                "login": "head_it",
                "password": "head123",
                "role_id": 3,  # –ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–ì–ª–∞–≤–∞ IT –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "head_hr",
                "password": "head123",
                "role_id": 3,  # –ì–ª–∞–≤–∞ –æ—Ç–¥–µ–ª–∞
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–ì–ª–∞–≤–∞ HR –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "resp_it",
                "password": "resp123",
                "role_id": 4,  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞
                "department_id": 1,  # IT –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π IT –æ—Ç–¥–µ–ª–∞"
            },
            {
                "login": "resp_hr",
                "password": "resp123",
                "role_id": 4,  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–¥–µ–ª–∞
                "department_id": 2,  # HR –æ—Ç–¥–µ–ª
                "access_id": 2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                "full_name": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π HR –æ—Ç–¥–µ–ª–∞"
            }
        ]
        
        for user_data in users_data:
            existing = db.query(User).filter(User.login == user_data["login"]).first()
            if not existing:
                # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                hashed_password = pwd_context.hash(user_data["password"])
                
                user = User(
                    login=user_data["login"],
                    password=hashed_password,
                    role_id=user_data["role_id"],
                    department_id=user_data["department_id"],
                    access_id=user_data["access_id"],
                    full_name=user_data["full_name"]
                )
                db.add(user)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['login']} ({user_data['full_name']})")
            else:
                print(f"   ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_data['login']}")
        
        db.commit()
        
        # 4. –°–æ–∑–¥–∞–µ–º —Ç–µ–≥–∏
        print("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–≥–æ–≤...")
        tags = [
            Tag(tag_name="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
            Tag(tag_name="–ü–æ–ª–∏—Ç–∏–∫–∏"),
            Tag(tag_name="–ü—Ä–æ—Ü–µ–¥—É—Ä—ã"),
            Tag(tag_name="–û–±—É—á–µ–Ω–∏–µ")
        ]
        
        for tag in tags:
            existing = db.query(Tag).filter(Tag.tag_name == tag.tag_name).first()
            if not existing:
                db.add(tag)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ–≥: {tag.tag_name}")
            else:
                print(f"   ‚ö†Ô∏è –¢–µ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {tag.tag_name}")
        
        db.commit()
        
        # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        print("üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        test_file_path = "test_document.txt"
        test_content = """
# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã

## –í–≤–µ–¥–µ–Ω–∏–µ
–î–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
2. –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º

## –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
- –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, DOCX –∏–ª–∏ TXT
- –£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –í—ã–±—Ä–∞—Ç—å –æ—Ç–¥–µ–ª –∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
- –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

## –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
- –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–¥–µ–ª–∞–º
- –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ

## –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞—â–∏—â–µ–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
–î–æ—Å—Ç—É–ø –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—Ç–¥–µ–ª–æ–≤ –∏ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ IT –æ—Ç–¥–µ–ª.
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        with open(test_file_path, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        existing_content = db.query(Content).filter(Content.title == "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã").first()
        if not existing_content:
            content = Content(
                title="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã",
                description="–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏",
                file_path=test_file_path,
                access_level=2,  # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
                department_id=5,  # –û–±—â–∏–π –æ—Ç–¥–µ–ª
                tag_id=1  # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            )
            db.add(content)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {content.title}")
        else:
            print(f"   ‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_content.title}")
        
        db.commit()
        
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   - –û—Ç–¥–µ–ª–æ–≤: {db.query(Department).count()}")
        print(f"   - –£—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞: {db.query(Access).count()}")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {db.query(User).count()}")
        print(f"   - –¢–µ–≥–æ–≤: {db.query(Tag).count()}")
        print(f"   - –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db.query(Content).count()}")
        
        print("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print("   - –õ–æ–≥–∏–Ω: Pavel2, –ü–∞—Ä–æ–ª—å: 123123")
        print("   - –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: admin123")
        print("   - –õ–æ–≥–∏–Ω: user1, –ü–∞—Ä–æ–ª—å: user123")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    create_test_data()
