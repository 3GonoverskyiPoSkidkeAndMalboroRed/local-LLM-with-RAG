#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
"""

import requests
import json

BASE_URL = "http://localhost:8000"

def test_admin_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∞...")
    
    login_data = {
        "login": "admin",
        "password": "admin123"
    }
    
    response = requests.post(f"{BASE_URL}/user/login", json=login_data)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–∞")
        return data.get('access_token')
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞: {response.text}")
        return None

def test_responsible_login():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ...")
    
    login_data = {
        "login": "resp_it",
        "password": "resp123"
    }
    
    response = requests.post(f"{BASE_URL}/user/login", json=login_data)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–∞")
        return data.get('access_token')
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ: {response.text}")
        return None

def test_user_info(token, user_type):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    print(f"\nüë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {user_type}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/user/me", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('full_name')}")
        print(f"–†–æ–ª—å: {data.get('role_name')}")
        print(f"–û—Ç–¥–µ–ª: {data.get('department_name')}")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_permissions(token, user_type):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
    print(f"\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π {user_type}...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/user/permissions", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
        print(f"–ö–ª—é—á–µ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:")
        for key, value in data.items():
            if value:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                print(f"  - {key}: {value}")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_users_list(token, user_type):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print(f"\nüë• –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({user_type})...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/user/users", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}")
        for user in data[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  - {user.get('full_name')} ({user.get('role_name')})")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_create_proposal(token, user_type):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ({user_type})...")
    
    headers = {"Authorization": f"Bearer {token}"}
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file_content = f"This is a test document content from {user_type}.".encode('utf-8')
    
    files = {
        'file': (f'test_document_{user_type}.txt', test_file_content, 'text/plain')
    }
    data = {
        'title': f'–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_type}',
        'description': f'–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç {user_type}',
        'access_level': 1,
        'department_id': 1
    }
    
    response = requests.post(f"{BASE_URL}/proposals/", files=files, data=data, headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 201:
        data = response.json()
        print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        print(f"ID: {data.get('id')}")
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title')}")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_proposals_list(token, user_type):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π ({user_type})...")
    
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(f"{BASE_URL}/proposals/", headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(data)}")
        if data:
            for proposal in data[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                print(f"  - {proposal.get('title')} (—Å—Ç–∞—Ç—É—Å: {proposal.get('status')})")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def test_proposal_review(admin_token, proposal_id):
    """–¢–µ—Å—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º"""
    print(f"\nüë®‚Äç‚öñÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º...")
    
    headers = {"Authorization": f"Bearer {admin_token}"}
    
    review_data = {
        "status": "approved",
        "review_comment": "–û–¥–æ–±—Ä–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    }
    
    response = requests.put(f"{BASE_URL}/proposals/{proposal_id}/review", json=review_data, headers=headers)
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        data = response.json()
        print(f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ")
        print(f"–°—Ç–∞—Ç—É—Å: {data.get('status')}")
        print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('review_comment')}")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        return None

def main():
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
    admin_token = test_admin_login()
    if not admin_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∞. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
    resp_token = test_responsible_login()
    if not resp_token:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ. –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return
    
    # –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    admin_info = test_user_info(admin_token, "–∞–¥–º–∏–Ω–∞")
    resp_info = test_user_info(resp_token, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    
    # –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    admin_permissions = test_permissions(admin_token, "–∞–¥–º–∏–Ω–∞")
    resp_permissions = test_permissions(resp_token, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_users = test_users_list(admin_token, "–∞–¥–º–∏–Ω–∞")
    resp_users = test_users_list(resp_token, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    admin_proposal = test_create_proposal(admin_token, "–∞–¥–º–∏–Ω–∞")
    resp_proposal = test_create_proposal(resp_token, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    
    # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    admin_proposals = test_proposals_list(admin_token, "–∞–¥–º–∏–Ω–∞")
    resp_proposals = test_proposals_list(resp_token, "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if resp_proposal:
        review_result = test_proposal_review(admin_token, resp_proposal.get('id'))
    
    print("\n‚úÖ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
