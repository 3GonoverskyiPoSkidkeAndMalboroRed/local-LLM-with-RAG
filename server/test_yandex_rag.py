#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Yandex RAG —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º DATABASE_URL –¥–ª—è Docker
os.environ['DATABASE_URL'] = 'mysql+mysqlconnector://root:123123@localhost:3307/db_test'

async def test_yandex_ai_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Yandex AI —Å–µ—Ä–≤–∏—Å"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = os.getenv('YANDEX_API_KEY') or os.getenv('YC_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID') or os.getenv('YC_FOLDER_ID')
    
    print(f"API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"Folder ID: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if folder_id else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not api_key or not folder_id:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:")
        print("YANDEX_API_KEY=–≤–∞—à_–∫–ª—é—á")
        print("YANDEX_FOLDER_ID=–≤–∞—à_folder_id")
        return False
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from yandex_ai_service import YandexAIService
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    yandex_ai = YandexAIService()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é SDK
    if not yandex_ai.ml_client:
        print("‚ùå Yandex Cloud ML SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    print("‚úÖ Yandex Cloud ML SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
        print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...")
        result = await yandex_ai.generate_text("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        
        if result and result.get("success"):
            print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"–û—Ç–≤–µ—Ç: {result.get('text', '')[:100]}...")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
            print(f"–û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        print("\nüî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
        embedding = await yandex_ai.get_embedding("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
        
        if embedding and len(embedding) > 0:
            print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (—Ä–∞–∑–º–µ—Ä: {len(embedding)})")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Yandex AI: {e}")
        return False

async def test_yandex_rag_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Yandex RAG —Å–µ—Ä–≤–∏—Å"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex RAG —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv('DATABASE_URL', 'mysql+mysqlconnector://root:123123@localhost:3307/db_test')
    print(f"Database URL: {database_url}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from yandex_rag_service import YandexRAGService
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        yandex_rag = YandexRAGService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RAG –¥–ª—è –æ—Ç–¥–µ–ª–∞ 5 (–∞–¥–º–∏–Ω)
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ RAG –¥–ª—è –æ—Ç–¥–µ–ª–∞ 5...")
        status = await yandex_rag.get_rag_status(5)
        
        print("‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ RAG —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"–°—Ç–∞—Ç—É—Å: {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Yandex RAG: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
        return False

async def test_rag_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–¥–µ–ª —Å ID 5 –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from database import SessionLocal
        from models_db import Department, Content
        
        db = SessionLocal()
        department = db.query(Department).filter(Department.id == 5).first()
        
        if not department:
            print("‚ùå –û—Ç–¥–µ–ª —Å ID 5 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            db.close()
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–¥–µ–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {department.id} - {department.department_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –æ—Ç–¥–µ–ª–µ
        content_count = db.query(Content).filter(Content.department_id == 5).count()
        print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª–µ: {content_count}")
        
        db.close()
        
        if content_count == 0:
            print("‚ùå –í –æ—Ç–¥–µ–ª–µ –Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG")
            return False
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        from yandex_rag_service import YandexRAGService
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
        yandex_rag = YandexRAGService()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG
        print(f"\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –¥–ª—è –æ—Ç–¥–µ–ª–∞ {department.id}...")
        result = await yandex_rag.initialize_rag(5, force_reload=False)
        
        if result.get("success"):
            print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG")
            print(f"–û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex RAG —Å–∏—Å—Ç–µ–º—ã...\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex AI —Å–µ—Ä–≤–∏—Å
    ai_success = await test_yandex_ai_service()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Yandex RAG —Å–µ—Ä–≤–∏—Å
    rag_success = await test_yandex_rag_service()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG
    init_success = await test_rag_initialization()
    
    print("\n" + "="*50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"Yandex AI —Å–µ—Ä–≤–∏—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if ai_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"Yandex RAG —Å–µ—Ä–≤–∏—Å: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if rag_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if init_success else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if ai_success and rag_success and init_success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        if not ai_success:
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_API_KEY –∏ YANDEX_FOLDER_ID")
            print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Cloud")
        if not rag_success:
            print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: docker-compose up db")
            print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        if not init_success:
            print("6. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –æ—Ç–¥–µ–ª–µ 5 –µ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã")
            print("7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

if __name__ == "__main__":
    asyncio.run(main()) 