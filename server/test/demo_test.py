#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ RAG
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
"""

import asyncio
import aiohttp
import time
import random
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
DEMO_CONFIG = {
    "base_url": "https://77.222.42.53/api",
    "department_id": "5",
    "concurrent_users": 5,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –¥–µ–º–æ
    "test_duration_seconds": 30,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
    "questions": [
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
        "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∏–ø—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"
    ]
}

class DemoChatTester:
    def __init__(self, config):
        self.config = config
        self.results = []
        self.errors = []
        self.start_time = None
        self.end_time = None
        
    async def send_query(self, session, user_id, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç task_id"""
        try:
            start_time = time.time()
            
            async with session.post(
                f"{self.config['base_url']}/llm/query",
                json={
                    "question": question,
                    "department_id": self.config["department_id"]
                },
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    task_id = data.get("task_id")
                    
                    query_time = time.time() - start_time
                    
                    return {
                        "user_id": user_id,
                        "task_id": task_id,
                        "question": question,
                        "query_time": query_time,
                        "status": "sent"
                    }
                else:
                    error_text = await response.text()
                    return {
                        "user_id": user_id,
                        "error": f"HTTP {response.status}: {error_text}",
                        "query_time": time.time() - start_time,
                        "status": "failed"
                    }
                    
        except Exception as e:
            return {
                "user_id": user_id,
                "error": str(e),
                "query_time": time.time() - start_time,
                "status": "failed"
            }

    async def get_result(self, session, task_id, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ task_id —Å –æ–ø—Ä–æ—Å–æ–º"""
        max_attempts = 20  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ
        
        for attempt in range(max_attempts):
            try:
                async with session.get(
                    f"{self.config['base_url']}/llm/query/{task_id}",
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data["status"] == "completed":
                            return {
                                "user_id": user_id,
                                "task_id": task_id,
                                "status": "completed",
                                "answer_length": len(data.get("answer", "")),
                                "chunks_count": len(data.get("chunks", [])),
                                "attempt": attempt + 1,
                                "answer_preview": data.get("answer", "")[:100] + "..." if data.get("answer") else ""
                            }
                        elif data["status"] == "failed":
                            return {
                                "user_id": user_id,
                                "task_id": task_id,
                                "status": "failed",
                                "error": data.get("error", "Unknown error"),
                                "attempt": attempt + 1
                            }
                        
                await asyncio.sleep(2)
                
            except Exception as e:
                await asyncio.sleep(2)
                
        return {
            "user_id": user_id,
            "task_id": task_id,
            "status": "timeout",
            "error": f"Timeout after {max_attempts} attempts",
            "attempt": max_attempts
        }

    async def simulate_user(self, session, user_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question = random.choice(self.config["questions"])
        
        start_time = time.time()
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        query_result = await self.send_query(session, user_id, question)
        
        if query_result["status"] == "failed":
            query_result["total_time"] = time.time() - start_time
            self.errors.append(query_result)
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            return query_result
        
        task_id = query_result["task_id"]
        print(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å, task_id: {task_id}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await self.get_result(session, task_id, user_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_result = {**query_result, **result}
        final_result["total_time"] = time.time() - start_time
        
        if result["status"] == "completed":
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –∑–∞ {final_result['total_time']:.2f}—Å")
            print(f"   üìù –û—Ç–≤–µ—Ç: {result.get('answer_preview', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            self.results.append(final_result)
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - {result['status']}: {result.get('error', 'Unknown')}")
            self.errors.append(final_result)
            
        return final_result

    async def run_demo(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
        print("üé¨ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ß–ê–¢–ê RAG")
        print("="*50)
        print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.config['concurrent_users']}")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {self.config['test_duration_seconds']} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ URL: {self.config['base_url']}")
        print(f"üè¢ –û—Ç–¥–µ–ª: {self.config['department_id']}")
        print("-" * 50)
        
        self.start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            tasks = [
                self.simulate_user(session, user_id) 
                for user_id in range(1, self.config['concurrent_users'] + 1)
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
        
        self.end_time = time.time()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_demo_results()
        
        return results

    def analyze_demo_results(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ-—Ç–µ—Å—Ç–∞"""
        print("\n" + "="*50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–ú–û-–¢–ï–°–¢–ê")
        print("="*50)
        
        total_time = self.end_time - self.start_time
        successful = len(self.results)
        failed = len(self.errors)
        total = successful + failed
        
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.config['concurrent_users']}")
        print(f"üì® –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful} ({successful/total*100:.1f}%)")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed} ({failed/total*100:.1f}%)")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if self.results:
            times = [r["total_time"] for r in self.results]
            query_times = [r["query_time"] for r in self.results]
            answer_lengths = [r.get("answer_length", 0) for r in self.results]
            
            print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(times)/len(times):.2f}—Å")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(times):.2f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(times):.2f}—Å")
            
            print(f"\nüì§ –í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò –ó–ê–ü–†–û–°–ê:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(query_times)/len(query_times):.3f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(query_times):.3f}—Å")
            
            print(f"\nüìù –ö–ê–ß–ï–°–¢–í–û –û–¢–í–ï–¢–û–í:")
            print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {sum(answer_lengths)/len(answer_lengths):.0f} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            rps = successful / total_time
            print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            error_types = {}
            for error in self.errors:
                error_type = error.get("error", "Unknown")[:50]
                error_types[error_type] = error_types.get(error_type, 0) + 1
            
            for error_type, count in error_types.items():
                print(f"   {error_type}: {count}")
        
        print("="*50)
        print("üéâ –î–µ–º–æ-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("üí° –î–ª—è –±–æ–ª–µ–µ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python run_tests.py multi --users 20 --duration 3")
        print("   python run_tests.py stress --users 50 --duration 5")

async def main():
    print("üé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —á–∞—Ç–∞ RAG...")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π.")
    print()
    
    tester = DemoChatTester(DEMO_CONFIG)
    await tester.run_demo()

if __name__ == "__main__":
    asyncio.run(main()) 