import asyncio
import aiohttp
import time
import json
from datetime import datetime
import random

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8081/api"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
CONCURRENT_USERS = 100
DEPARTMENT_ID = "5"  # –ò–ª–∏ –¥—Ä—É–≥–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª

# –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
TEST_QUESTIONS = [
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
    "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π",
    "–ö–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∏–ø—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ?",
    "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ò–ò –∏ –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ reinforcement learning?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —ç—Ç–∏–∫—É –≤ –ò–ò",
    "–ö–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò –≤ –º–µ–¥–∏—Ü–∏–Ω–µ?"
]

class LoadTester:
    def __init__(self):
        self.results = []
        self.errors = []
        
    async def send_query(self, session, user_id, question):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç task_id"""
        try:
            start_time = time.time()
            
            async with session.post(
                f"{BASE_URL}/llm/query",
                json={
                    "question": question,
                    "department_id": DEPARTMENT_ID
                },
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    task_id = data.get("task_id")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                    query_time = time.time() - start_time
                    
                    return {
                        "user_id": user_id,
                        "task_id": task_id,
                        "question": question,
                        "query_sent_at": time.time(),
                        "query_time": query_time,
                        "status": "sent"
                    }
                else:
                    error_text = await response.text()
                    return {
                        "user_id": user_id,
                        "error": f"HTTP {response.status}: {error_text}",
                        "query_time": time.time() - start_time,
                        "status": "failed"
                    }
                    
        except Exception as e:
            return {
                "user_id": user_id,
                "error": str(e),
                "query_time": time.time() - start_time,
                "status": "failed"
            }

    async def get_result(self, session, task_id, user_id, max_attempts=60):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ task_id —Å –æ–ø—Ä–æ—Å–æ–º"""
        for attempt in range(max_attempts):
            try:
                async with session.get(
                    f"{BASE_URL}/llm/query/{task_id}",
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data["status"] == "completed":
                            return {
                                "user_id": user_id,
                                "task_id": task_id,
                                "status": "completed",
                                "answer_length": len(data.get("answer", "")),
                                "chunks_count": len(data.get("chunks", [])),
                                "attempt": attempt + 1
                            }
                        elif data["status"] == "failed":
                            return {
                                "user_id": user_id,
                                "task_id": task_id,
                                "status": "failed",
                                "error": data.get("error", "Unknown error"),
                                "attempt": attempt + 1
                            }
                        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "pending" –∏–ª–∏ "processing", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
                        
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–ø—Ä–æ—Å–æ–º
                await asyncio.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è task {task_id}: {e}")
                await asyncio.sleep(2)
                
        # –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        return {
            "user_id": user_id,
            "task_id": task_id,
            "status": "timeout",
            "error": f"Timeout after {max_attempts} attempts",
            "attempt": max_attempts
        }

    async def simulate_user(self, session, user_id):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        question = random.choice(TEST_QUESTIONS)
        
        start_time = time.time()
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        query_result = await self.send_query(session, user_id, question)
        
        if query_result["status"] == "failed":
            query_result["total_time"] = time.time() - start_time
            self.errors.append(query_result)
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            return query_result
        
        task_id = query_result["task_id"]
        print(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å, task_id: {task_id}")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await self.get_result(session, task_id, user_id)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_result = {**query_result, **result}
        final_result["total_time"] = time.time() - start_time
        
        if result["status"] == "completed":
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç –∑–∞ {final_result['total_time']:.2f}—Å")
            self.results.append(final_result)
        else:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - {result['status']}: {result.get('error', 'Unknown')}")
            self.errors.append(final_result)
            
        return final_result

    async def run_load_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {CONCURRENT_USERS} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print(f"üéØ URL: {BASE_URL}")
        print(f"üè¢ –û—Ç–¥–µ–ª: {DEPARTMENT_ID}")
        print("-" * 50)
        
        start_time = time.time()
        
        async with aiohttp.ClientSession() as session:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            tasks = [
                self.simulate_user(session, user_id) 
                for user_id in range(1, CONCURRENT_USERS + 1)
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
        
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results(total_time)
        
        return results

    def analyze_results(self, total_time):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ê")
        print("="*60)
        
        successful = len(self.results)
        failed = len(self.errors)
        total = successful + failed
        
        print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful} ({successful/total*100:.1f}%)")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {failed} ({failed/total*100:.1f}%)")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if self.results:
            times = [r["total_time"] for r in self.results]
            query_times = [r["query_time"] for r in self.results]
            
            print(f"\n‚è±Ô∏è  –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(times)/len(times):.2f}—Å")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ: {min(times):.2f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(times):.2f}—Å")
            print(f"   –ú–µ–¥–∏–∞–Ω–∞: {sorted(times)[len(times)//2]:.2f}—Å")
            
            print(f"\nüì§ –í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò –ó–ê–ü–†–û–°–ê:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {sum(query_times)/len(query_times):.3f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ: {max(query_times):.3f}—Å")
            
            # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            rps = successful / total_time
            print(f"\nüöÄ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
            print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: {rps:.2f}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—Ä–æ—Å: {total_time/total:.2f}—Å")
        
        if self.errors:
            print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
            error_types = {}
            for error in self.errors:
                error_type = error.get("error", "Unknown")[:50]
                error_types[error_type] = error_types.get(error_type, 0) + 1
            
            for error_type, count in error_types.items():
                print(f"   {error_type}: {count}")
        
        print("="*60)

async def main():
    tester = LoadTester()
    await tester.run_load_test()

if __name__ == "__main__":
    asyncio.run(main())