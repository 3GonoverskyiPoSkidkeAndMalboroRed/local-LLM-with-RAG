#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ RAG
"""

import asyncio
import argparse
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Ç–µ—Å—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–∞—Ö"""
    print("="*80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ê–¢–ê RAG")
    print("="*80)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    print("1. multi_user_chat_test.py - –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç —Å —á–∞—Ç-—Å–µ—Å—Å–∏—è–º–∏")
    print("2. stress_test_chat.py - –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    print("3. load_test_chat.py - –ü—Ä–æ—Å—Ç–æ–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç")
    print("="*80)

async def run_multi_user_test(config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç"""
    from multi_user_chat_test import MultiUserChatTester
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    tester = MultiUserChatTester(config)
    await tester.run_multi_user_test()

async def run_stress_test(config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç"""
    from stress_test_chat import StressTestChat
    
    print(f"üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞...")
    tester = StressTestChat(config)
    await tester.run_stress_test()

async def run_load_test(config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
    from load_test_chat import LoadTester
    
    print(f"‚ö° –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    tester = LoadTester()
    await tester.run_load_test()

async def run_quick_test(config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    import aiohttp
    import time
    
    print(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...")
    
    base_url = config.get("base_url", "http://localhost:8081/api")
    department_id = config.get("department_id", "5")
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            async with session.get(f"{base_url}/llm/models", timeout=10) as response:
                if response.status == 200:
                    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                    return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–¥–µ–ª–∞
        try:
            async with session.get(f"{base_url}/llm/queue/status/{department_id}", timeout=10) as response:
                if response.status == 200:
                    status = await response.json()
                    if status.get("initialized"):
                        print(f"‚úÖ –û—Ç–¥–µ–ª {department_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    else:
                        print(f"‚ö†Ô∏è –û—Ç–¥–µ–ª {department_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞: HTTP {response.status}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            start_time = time.time()
            async with session.post(
                f"{base_url}/llm/query",
                json={
                    "question": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                    "department_id": department_id
                },
                timeout=30
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    task_id = data.get("task_id")
                    print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, task_id: {task_id}")
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    for attempt in range(20):
                        await asyncio.sleep(2)
                        async with session.get(f"{base_url}/llm/query/{task_id}", timeout=10) as result_response:
                            if result_response.status == 200:
                                result_data = await result_response.json()
                                if result_data["status"] == "completed":
                                    total_time = time.time() - start_time
                                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ {total_time:.2f}—Å")
                                    print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result_data.get('answer', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                                    return
                                elif result_data["status"] == "failed":
                                    print(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result_data.get('error', 'Unknown')}")
                                    return
                    
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: HTTP {response.status} - {error_text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ RAG")
    parser.add_argument("test_type", choices=["multi", "stress", "load", "quick"], 
                       help="–¢–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--users", type=int, default=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    parser.add_argument("--duration", type=int, default=5, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    parser.add_argument("--url", type=str, default="http://localhost:8081/api", help="URL API")
    parser.add_argument("--department", type=str, default="5", help="ID –æ—Ç–¥–µ–ª–∞")
    parser.add_argument("--ramp-up", type=int, default=2, help="–í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è stress)")
    parser.add_argument("--ramp-down", type=int, default=2, help="–í—Ä–µ–º—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è stress)")
    parser.add_argument("--no-chat-history", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
    parser.add_argument("--no-feedback", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–æ–≤")
    parser.add_argument("--no-monitoring", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    
    args = parser.parse_args()
    
    # –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "base_url": args.url,
        "department_id": args.department,
        "enable_chat_history": not args.no_chat_history,
        "enable_feedback": not args.no_feedback,
        "enable_monitoring": not args.no_monitoring
    }
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–∞
    if args.test_type == "multi":
        config.update({
            "concurrent_users": args.users,
            "test_duration_minutes": args.duration
        })
        await run_multi_user_test(config)
    
    elif args.test_type == "stress":
        config.update({
            "concurrent_users": args.users,
            "test_duration_minutes": args.duration,
            "ramp_up_minutes": args.ramp_up,
            "ramp_down_minutes": args.ramp_down
        })
        await run_stress_test(config)
    
    elif args.test_type == "load":
        # –î–ª—è load_test_chat.py –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        import load_test_chat
        load_test_chat.CONCURRENT_USERS = args.users
        load_test_chat.BASE_URL = args.url
        load_test_chat.DEPARTMENT_ID = args.department
        await run_load_test(config)
    
    elif args.test_type == "quick":
        await run_quick_test(config)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_banner()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("python run_tests.py <—Ç–∏–ø_—Ç–µ—Å—Ç–∞> [–æ–ø—Ü–∏–∏]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("python run_tests.py quick")
        print("python run_tests.py multi --users 20 --duration 3")
        print("python run_tests.py stress --users 100 --duration 10")
        print("python run_tests.py load --users 50")
        sys.exit(1)
    
    asyncio.run(main()) 