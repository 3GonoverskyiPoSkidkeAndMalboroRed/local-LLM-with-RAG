#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ RAG —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
"""

import asyncio
import argparse
import sys
import os
import json
import time
from datetime import datetime
from typing import Dict, Any, List

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Ç–µ—Å—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class TestLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    
    def __init__(self, verbose: bool = True, save_to_file: bool = False):
        self.verbose = verbose
        self.save_to_file = save_to_file
        self.log_file = None
        self.test_results = []
        
        if save_to_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.log_file = open(f"test_results_{timestamp}.json", "w", encoding="utf-8")
    
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        formatted_message = f"[{timestamp}] {level}: {message}"
        
        if self.verbose:
            print(formatted_message)
        
        if self.save_to_file:
            self.test_results.append({
                "timestamp": timestamp,
                "level": level,
                "message": message
            })
    
    def log_request(self, user_id: str, question: str, task_id: str = None, duration: float = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞"""
        self.log(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å:")
        self.log(f"   üìù –í–æ–ø—Ä–æ—Å: {question}")
        if task_id:
            self.log(f"   üÜî Task ID: {task_id}")
        if duration:
            self.log(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {duration:.3f}—Å")
    
    def log_response(self, user_id: str, task_id: str, response_data: Dict[str, Any], duration: float = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        status = response_data.get("status", "unknown")
        answer = response_data.get("answer", "")
        chunks = response_data.get("chunks", [])
        files = response_data.get("files", [])
        error = response_data.get("error", "")
        
        self.log(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç:")
        self.log(f"   üÜî Task ID: {task_id}")
        self.log(f"   üìä –°—Ç–∞—Ç—É—Å: {status}")
        
        if status == "completed":
            self.log(f"   ‚úÖ –û—Ç–≤–µ—Ç ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤):")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
            preview = answer[:200] + "..." if len(answer) > 200 else answer
            self.log(f"      {preview}")
            
            if chunks:
                self.log(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(chunks)}")
                for i, chunk in enumerate(chunks[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                    chunk_preview = chunk[:100] + "..." if len(chunk) > 100 else chunk
                    self.log(f"      –§—Ä–∞–≥–º–µ–Ω—Ç {i+1}: {chunk_preview}")
            
            if files:
                self.log(f"   üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(files)} —Ñ–∞–π–ª–æ–≤")
                for file in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    self.log(f"       {file}")
        
        elif status == "failed":
            self.log(f"   ‚ùå –û—à–∏–±–∫–∞: {error}")
        
        if duration:
            self.log(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {duration:.3f}—Å")
    
    def log_summary(self, results: List[Dict[str, Any]]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_requests = len(results)
        successful = len([r for r in results if r.get("status") == "completed"])
        failed = total_requests - successful
        
        self.log("="*60)
        self.log("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        self.log(f"   üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}")
        self.log(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
        self.log(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        self.log(f"    –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful/total_requests*100):.1f}%" if total_requests > 0 else "    –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: 0%")
        
        if successful > 0:
            avg_response_time = sum([r.get("total_time", 0) for r in results if r.get("status") == "completed"]) / successful
            self.log(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}—Å")
        
        self.log("="*60)
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª"""
        if self.save_to_file and self.log_file:
            json.dump(self.test_results, self.log_file, ensure_ascii=False, indent=2)
            self.log_file.close()

def print_banner():
    """–í—ã–≤–æ–¥–∏—Ç –±–∞–Ω–Ω–µ—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–∞—Ö"""
    print("="*80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ß–ê–¢–ê RAG –° –î–ï–¢–ê–õ–¨–ù–´–ú –í–´–í–û–î–û–ú")
    print("="*80)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    print("1. quick - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏")
    print("2. multi - –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç —Å —á–∞—Ç-—Å–µ—Å—Å–∏—è–º–∏")
    print("3. stress - –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
    print("4. load - –ü—Ä–æ—Å—Ç–æ–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç")
    print("5. detailed - –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤")
    print("="*80)

async def run_detailed_test(config: Dict[str, Any], logger: TestLogger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –≤—ã–≤–æ–¥–æ–º –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    import aiohttp
    
    print(f"üîç –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    base_url = config.get("base_url", "http://localhost:8081/api")
    department_id = config.get("department_id", "5")
    num_requests = config.get("num_requests", 5)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_questions = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è—Ö",
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π?",
        "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
    ]
    
    results = []
    
    async with aiohttp.ClientSession() as session:
        for i in range(min(num_requests, len(test_questions))):
            question = test_questions[i]
            user_id = f"test_user_{i+1}"
            
            logger.log(f"\nüîÑ –¢–µ—Å—Ç {i+1}/{num_requests}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            start_time = time.time()
            try:
                async with session.post(
                    f"{base_url}/llm/query",
                    json={
                        "question": question,
                        "department_id": department_id
                    },
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    query_time = time.time() - start_time
                    
                    if response.status == 200:
                        data = await response.json()
                        task_id = data.get("task_id")
                        
                        logger.log_request(user_id, question, task_id, query_time)
                        
                        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        result_start_time = time.time()
                        for attempt in range(30):  # –ú–∞–∫—Å–∏–º—É–º 30 –ø–æ–ø—ã—Ç–æ–∫
                            await asyncio.sleep(2)
                            
                            try:
                                async with session.get(
                                    f"{base_url}/llm/query/{task_id}",
                                    timeout=aiohttp.ClientTimeout(total=10)
                                ) as result_response:
                                    if result_response.status == 200:
                                        result_data = await result_response.json()
                                        total_time = time.time() - start_time
                                        
                                        logger.log_response(user_id, task_id, result_data, total_time)
                                        
                                        results.append({
                                            "user_id": user_id,
                                            "question": question,
                                            "task_id": task_id,
                                            "status": result_data.get("status"),
                                            "total_time": total_time,
                                            "answer_length": len(result_data.get("answer", "")),
                                            "chunks_count": len(result_data.get("chunks", [])),
                                            "files_count": len(result_data.get("files", []))
                                        })
                                        break
                                    else:
                                        logger.log(f"   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: HTTP {result_response.status}")
                            except Exception as e:
                                logger.log(f"   ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - {e}")
                        else:
                            logger.log(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {user_id}")
                            results.append({
                                "user_id": user_id,
                                "question": question,
                                "task_id": task_id,
                                "status": "timeout",
                                "total_time": time.time() - start_time
                            })
                    else:
                        error_text = await response.text()
                        logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: HTTP {response.status} - {error_text}")
                        results.append({
                            "user_id": user_id,
                            "question": question,
                            "status": "failed",
                            "error": f"HTTP {response.status}: {error_text}",
                            "total_time": query_time
                        })
                        
            except Exception as e:
                logger.log(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                results.append({
                    "user_id": user_id,
                    "question": question,
                    "status": "failed",
                    "error": str(e),
                    "total_time": time.time() - start_time
                })
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.log_summary(results)
    return results

async def run_quick_test(config: Dict[str, Any], logger: TestLogger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    import aiohttp
    
    logger.log("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...")
    
    base_url = config.get("base_url", "http://localhost:8081/api")
    department_id = config.get("department_id", "5")
    
    async with aiohttp.ClientSession() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        try:
            async with session.get(f"{base_url}/llm/models", timeout=10) as response:
                if response.status == 200:
                    logger.log("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    logger.log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                    return
        except Exception as e:
            logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–¥–µ–ª–∞
        try:
            async with session.get(f"{base_url}/llm/queue/status/{department_id}", timeout=10) as response:
                if response.status == 200:
                    status = await response.json()
                    if status.get("initialized"):
                        logger.log(f"‚úÖ –û—Ç–¥–µ–ª {department_id} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    else:
                        logger.log(f"‚ö†Ô∏è –û—Ç–¥–µ–ª {department_id} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞: HTTP {response.status}")
        except Exception as e:
            logger.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            start_time = time.time()
            async with session.post(
                f"{base_url}/llm/query",
                json={
                    "question": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                    "department_id": department_id
                },
                timeout=30
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    task_id = data.get("task_id")
                    logger.log(f"‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, task_id: {task_id}")
                    
                    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    for attempt in range(20):
                        await asyncio.sleep(2)
                        async with session.get(f"{base_url}/llm/query/{task_id}", timeout=10) as result_response:
                            if result_response.status == 200:
                                result_data = await result_response.json()
                                if result_data["status"] == "completed":
                                    total_time = time.time() - start_time
                                    logger.log(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –∑–∞ {total_time:.2f}—Å")
                                    logger.log(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result_data.get('answer', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                                    
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
                                    answer = result_data.get('answer', '')
                                    preview = answer[:200] + "..." if len(answer) > 200 else answer
                                    logger.log(f"üìù –û—Ç–≤–µ—Ç: {preview}")
                                    return
                                elif result_data["status"] == "failed":
                                    logger.log(f"‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result_data.get('error', 'Unknown')}")
                                    return
                    
                    logger.log("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                else:
                    error_text = await response.text()
                    logger.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: HTTP {response.status} - {error_text}")
        except Exception as e:
            logger.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

async def run_multi_user_test(config: Dict[str, Any], logger: TestLogger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ—Å—Ç"""
    from multi_user_chat_test import MultiUserChatTester
    
    logger.log("üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    tester = MultiUserChatTester(config)
    await tester.run_multi_user_test()

async def run_stress_test(config: Dict[str, Any], logger: TestLogger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç"""
    from stress_test_chat import StressTestChat
    
    logger.log("üî• –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞...")
    tester = StressTestChat(config)
    await tester.run_stress_test()

async def run_load_test(config: Dict[str, Any], logger: TestLogger):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç"""
    from load_test_chat import LoadTester
    
    logger.log("‚ö° –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    tester = LoadTester()
    await tester.run_load_test()

async def main():
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–∞—Ç–∞ RAG —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º")
    parser.add_argument("test_type", choices=["quick", "detailed", "multi", "stress", "load"], 
                       help="–¢–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--users", type=int, default=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    parser.add_argument("--duration", type=int, default=5, help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö")
    parser.add_argument("--url", type=str, default="http://localhost:8081/api", help="URL API")
    parser.add_argument("--department", type=str, default="5", help="ID –æ—Ç–¥–µ–ª–∞")
    parser.add_argument("--ramp-up", type=int, default=2, help="–í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è stress)")
    parser.add_argument("--ramp-down", type=int, default=2, help="–í—Ä–µ–º—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è stress)")
    parser.add_argument("--no-chat-history", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞")
    parser.add_argument("--no-feedback", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∑—ã–≤–æ–≤")
    parser.add_argument("--no-monitoring", action="store_true", help="–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    parser.add_argument("--verbose", action="store_true", default=True, help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥")
    parser.add_argument("--save-log", action="store_true", help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ —Ñ–∞–π–ª")
    parser.add_argument("--num-requests", type=int, default=5, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è detailed —Ç–µ—Å—Ç–∞")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = TestLogger(verbose=args.verbose, save_to_file=args.save_log)
    
    try:
        # –û–±—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = {
            "base_url": args.url,
            "department_id": args.department,
            "enable_chat_history": not args.no_chat_history,
            "enable_feedback": not args.no_feedback,
            "enable_monitoring": not args.no_monitoring,
            "num_requests": args.num_requests
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
        if args.test_type == "quick":
            await run_quick_test(config, logger)
        elif args.test_type == "detailed":
            await run_detailed_test(config, logger)
        elif args.test_type == "multi":
            config.update({
                "concurrent_users": args.users,
                "test_duration_minutes": args.duration
            })
            await run_multi_user_test(config, logger)
        elif args.test_type == "stress":
            config.update({
                "concurrent_users": args.users,
                "test_duration_minutes": args.duration,
                "ramp_up_minutes": args.ramp_up,
                "ramp_down_minutes": args.ramp_down
            })
            await run_stress_test(config, logger)
        elif args.test_type == "load":
            import load_test_chat
            load_test_chat.CONCURRENT_USERS = args.users
            load_test_chat.BASE_URL = args.url
            load_test_chat.DEPARTMENT_ID = args.department
            await run_load_test(config, logger)
    
    finally:
        logger.close()

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_banner()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("python run_tests.py <—Ç–∏–ø_—Ç–µ—Å—Ç–∞> [–æ–ø—Ü–∏–∏]")
        print("\n–ü—Ä–∏–º–µ—Ä—ã:")
        print("python run_tests.py quick")
        print("python run_tests.py detailed --num-requests 10")
        print("python run_tests.py multi --users 20 --duration 3")
        print("python run_tests.py stress --users 100 --duration 10")
        print("python run_tests.py load --users 50")
        print("\n–û–ø—Ü–∏–∏:")
        print("--verbose          –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("--save-log         –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ —Ñ–∞–π–ª")
        print("--num-requests N   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è detailed —Ç–µ—Å—Ç–∞")
        sys.exit(1)
    
    asyncio.run(main()) 