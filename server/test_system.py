#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
from dotenv import load_dotenv

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from database import get_db
        print("‚úÖ Database import OK")
    except Exception as e:
        print(f"‚ùå Database import failed: {e}")
        return False
    
    try:
        from yandex_cloud_adapter import YandexCloudAdapter
        print("‚úÖ YandexCloudAdapter import OK")
    except Exception as e:
        print(f"‚ùå YandexCloudAdapter import failed: {e}")
        return False
    
    try:
        from yandex_embeddings import YandexEmbeddings
        print("‚úÖ YandexEmbeddings import OK")
    except Exception as e:
        print(f"‚ùå YandexEmbeddings import failed: {e}")
        return False
    
    try:
        from yandex_rag_service import get_rag_service
        print("‚úÖ RAG service import OK")
    except Exception as e:
        print(f"‚ùå RAG service import failed: {e}")
        return False
    
    try:
        from routes.yandex_rag_routes import router
        print("‚úÖ RAG routes import OK")
    except Exception as e:
        print(f"‚ùå RAG routes import failed: {e}")
        return False
    
    try:
        import app
        print("‚úÖ App import OK")
    except Exception as e:
        print(f"‚ùå App import failed: {e}")
        return False
    
    return True

def test_environment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    load_dotenv()
    
    required_vars = [
        'YANDEX_API_KEY',
        'YANDEX_FOLDER_ID',
        'USE_YANDEX_CLOUD'
    ]
    
    all_ok = True
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: SET")
        else:
            print(f"‚ùå {var}: NOT SET")
            all_ok = False
    
    return all_ok

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from database import get_db
        from sqlalchemy.orm import Session
        from sqlalchemy import text
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        db = next(get_db())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        result = db.execute(text("SELECT 1"))
        result.fetchone()
        
        print("‚úÖ Database connection OK")
        return True
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

async def test_yandex_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex API"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex API...")
    
    try:
        from yandex_cloud_adapter import get_yandex_adapter
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–µ—Ä
        adapter = await get_yandex_adapter()
        
        print("‚úÖ Yandex API adapter OK")
        return True
    except Exception as e:
        print(f"‚ùå Yandex API test failed: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    print("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection),
        ("Yandex API", test_yandex_api),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            if test_name == "Yandex API":
                result = await test_func()
            else:
                result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
    
    return all_passed

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 