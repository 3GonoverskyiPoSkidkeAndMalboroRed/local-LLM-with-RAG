#!/usr/bin/env python3
"""
–¢–µ—Å—Ç RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
"""

import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

async def test_rag_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    
    try:
        from fastapi.testclient import TestClient
        from app import app
        
        client = TestClient(app)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        test_request = {
            "query": "–ø—Ä–∏–≤–µ—Ç",
            "department_id": "5",
            "max_chunks": 5,
            "similarity_threshold": 0.7,
            "include_metadata": True,
            "use_cache": True
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {json.dumps(test_request, indent=2)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = client.post("/api/yandex/rag/query", json=test_request)
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ RAG –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {result.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')[:100]}...")
            print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result.get('sources', []))}")
            print(f"üìù –ß–∞–Ω–∫–∏: {len(result.get('chunks_used', []))}")
            print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_rag_service_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîç –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from yandex_rag_service import get_rag_service, RAGContext
        from database import get_db
        
        # –ü–æ–ª—É—á–∞–µ–º RAG —Å–µ—Ä–≤–∏—Å
        rag_service = await get_rag_service()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = RAGContext(
            query="–ø—Ä–∏–≤–µ—Ç",
            department_id="5",
            max_chunks=3,
            similarity_threshold=0.7,
            include_metadata=True
        )
        
        print(f"üì§ –í—ã–ø–æ–ª–Ω—è–µ–º RAG –∑–∞–ø—Ä–æ—Å: {context.query}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db_session = next(get_db())
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º RAG –∑–∞–ø—Ä–æ—Å
        result = await rag_service.query_with_rag(
            context=context,
            db_session=db_session,
            use_cache=True
        )
        
        print("‚úÖ RAG –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {result.answer[:100]}...")
        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result.sources)}")
        print(f"üìù –ß–∞–Ω–∫–∏: {len(result.chunks_used)}")
        print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.2f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_rag_metrics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ RAG"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ RAG...")
    
    try:
        from yandex_rag_service import get_rag_service
        
        rag_service = await get_rag_service()
        metrics = rag_service.get_metrics()
        
        print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ RAG –ø–æ–ª—É—á–µ–Ω—ã:")
        for key, value in metrics.items():
            print(f"  {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    tests = [
        ("RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç", test_rag_endpoint),
        ("–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG", test_rag_service_direct),
        ("–ú–µ—Ç—Ä–∏–∫–∏ RAG", test_rag_metrics),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*50)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}")
    print(f"–£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(results) - success_count}")
    
    if success_count == len(results):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! RAG —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {len(results) - success_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 