#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Docker volume —Å —Ñ–∞–π–ª–∞–º–∏
"""

import os
import subprocess
import sys

def check_docker_volume():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Docker volume"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ Docker volume...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        result = subprocess.run(['docker', 'volume', 'ls'], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH")
        return False
    
    # –ò—â–µ–º volume —Å —Ñ–∞–π–ª–∞–º–∏
    volume_name = None
    for line in result.stdout.split('\n'):
        if 'files_storage' in line:
            volume_name = line.split()[-1]
            break
    
    if not volume_name:
        print("‚ùå Volume —Å —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω volume: {volume_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ volume
    try:
        cmd = f'docker run --rm -v {volume_name}:/files alpine ls -la /files'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ volume:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ volume:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ volume: {e}")
        return False
    
    return True

def check_container_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        cmd = 'docker exec local-llm-with-rag-backend-1 ls -la /app/files/'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ /app/files/:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ /app/files/:")
            print(result.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç–¥–µ–ª–∞
        cmd = 'docker exec local-llm-with-rag-backend-1 ls -la /app/files/ContentForDepartment/5/'
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ /app/files/ContentForDepartment/5/:")
            print(result.stdout)
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ /app/files/ContentForDepartment/5/:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")

def main():
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker volume
    if check_docker_volume():
        print("\n‚úÖ Docker volume —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Docker volume")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    check_container_files()
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∑—é–º–µ:")
    print("- –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Docker volume, –∞ –Ω–µ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ")
    print("- –ü—É—Ç—å /app/files/ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞")
    print("- –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ API")

if __name__ == "__main__":
    main() 